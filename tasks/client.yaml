---
- name: Create working directory
  ansible.builtin.file:
    path: "{{ thales_client_working_dir }}"
    state: directory
    mode: '755'

- name: Create thales group
  ansible.builtin.group:
    name: nfast
    gid: "{{ thales_client_gid }}"

- name: Create thales user
  ansible.builtin.user:
    name: nfast
    uid: "{{ thales_client_uid }}"
    group: "{{ thales_client_gid }}"
    create_home: true
    home: /opt/nfast

- name: Set selinux bool to allow barbican containers to access /opt/nfast
  ansible.posix.seboolean:
    name: os_barbican_write_pki
    state: true
    persistent: true
  when: ansible_os_family | lower == 'redhat'

- name: Download Thales client tarball
  ansible.builtin.get_url:
    url: "{{ thales_client_tarball_location }}"
    dest: "{{ thales_client_working_dir }}/{{ thales_client_tarball_name }}"
    mode: '644'
    force: false

- name: Unpack tarball to working directory
  ansible.builtin.unarchive:
    src: "{{ thales_client_working_dir }}/{{ thales_client_tarball_name }}"
    dest: "{{ thales_client_working_dir }}"
    creates: "{{ thales_client_working_dir }}/{{ thales_client_path }}"
    remote_src: true

- name: Unpack tarball to /opt/nfast
  ansible.builtin.shell: |
    for i in `find "{{ thales_client_working_dir }}/{{ thales_client_path }}" -name *.tar` ; do
        tar -C / -xvf $i ;
    done
  args:
    creates: /opt/nfast/sbin/install

- name: Check for libnsl dependency
  ansible.builtin.stat:
    path: /lib64/libnsl.so.1
  register: st

- name: Ensure libnsl dependency is installed
  ansible.builtin.package:
    name: libnsl
    state: present
  when: not st.stat.exists

- name: Run installer
  ansible.builtin.shell: set -o pipefail && echo "1" | /opt/nfast/sbin/install
  args:
    creates: /opt/nfast/kmdata

- name: Get the security world data
  ansible.builtin.get_url:
    url: "{{ thales_km_data_location }}"
    dest: "/root/{{ thales_km_data_tarball_name }}"
    mode: '644'
    force: false

- name: Remove the old km_data
  ansible.builtin.file:
    path: /opt/nfast/kmdata
    state: absent

- name: Replace kmdata
  ansible.builtin.unarchive:
    src: "/root/{{ thales_km_data_tarball_name }}"
    dest: /opt/nfast
    remote_src: true

- name: Create cknfastrc
  ansible.builtin.template:
    src: cknfastrc.j2
    dest: /opt/nfast/cknfastrc
    mode: '644'

- name: Create snmp.conf
  ansible.builtin.copy:
    dest: /opt/nfast/etc/snmp/snmp.conf
    content: |
      defaultPort 21161
    force: true
    mode: '644'

- name: Enroll client to hsms
  ansible.builtin.include_tasks: client_enroll.yaml
  loop: "{{ nshield_hsms }}"

- name: Set selinux contexts for /opt/nfast
  ansible.builtin.command: restorecon -R /opt/nfast

- name: Restart hardserver
  ansible.builtin.command: /opt/nfast/sbin/init.d-ncipher restart

- name: Do an enquiry to confirm connection
  ansible.builtin.command: /opt/nfast/bin/enquiry
  register: enquiry

- name: Enquiry result
  ansible.builtin.debug:
    var: enquiry

- name: Set up rfs_sync
  ansible.builtin.command: /opt/nfast/bin/rfs-sync --setup --no-authenticate {{ thales_rfs_server_ip_address }}

- name: Get keys from rfs server
  ansible.builtin.command: /opt/nfast/bin/rfs-sync --update
